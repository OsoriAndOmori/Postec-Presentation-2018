## 1. 발표자 소개
보통 이런데와서 발표하는 사람은 뭐 대단한거 만들고, 회사에서 특별대우 받는 사람들이겠지만,
나는 걍 지극히 평범한 개발자.

진짜 뭐가 없음. 없어서 오히려 여러분이 더 공감해주실 듯.

## 2. 다루고자하는 내용
어느 사이트에서 퍼온것 아님. 모두 다 제 뇌에서 나온거고,
주변 친구들에게 크로스 체크 정도 하고 온 날 것이니 받아들이셔도 좋고, 적당히 필터링 하셔도 좋음.


## 3. 대학교 시절 & 취업을 하자~(짧게 끝내기 - 3분~)
제일 존경하는 교수님 밑에서 컴퓨터 아키텍쳐 하드웨어 전공했구요.
임베디드 시스템 공부 많이 했습니다. 한창 술먹고 게임(카오스, 롤, 디아3 대균열 없을 때, 와우 리치왕 ~ 드군)하고 군대 갔다오고 2학년 때 배웠는데, 이 분야는 기초가 없어도 배울 수가 있더라구요. 그래서 마음 다잡고 재미붙였습니다.

대학원 가려다가 교수님이 마음에 드는곳엔 이미 자리차지 하고 있는 대학원생이 마음에 안듬, 일이 마음에 드는 곳엔 교수님이 너무 빡쌤. 갈팡질팡하다 집이 돈도 없고 그냥 취업하기루함.

온갖 곳에 서류 넣고 면접 보러 다니고~
네이버랑 etc 한 두 개 더 붙음. 다 소프트웨어 하는 회사들..
재수 좋게 붙은거 빼면, 정말 전형적인 그냥 평범한 컴퓨터공학 취준생의 결말이져??


## 4. 운좋게 입사는 하긴했는데 난 너무 뭘 모르는것 같다.
지금 당장의 지식은 여러분이 가진걸 대변하질 않음.
면접관들도 여러분이 다 학부생 지식 가지고 있는걸 감안하고 면접함.
면접용 질문이나 열심히 외워가시면 다 답변하실 수 있을 것.
좀 괜찮은 회사지원하면 면접관들이 알아서 포텐 끌어내주는 면접 질문 많이 하실테니,
너무 두려워 하지마시고 ~

무튼 어디든 뽑혔다고 칩시다.

대학교 때 공부를 하고 온 사람도, 안한 사람도 시작의 차이는 크긴하지만 (해봤다 안해봤다의 gap정도) 일단 다 입사하면 초심자.
실무에서 바로 투입 가능한건 동기 50여명중에 2~3명 정도로만 보임. (진성 컴덕들..)
어느 회사나 이건 동일 할 것.

모든 개발/유지/보수는 혼자 하는게 아니기 때문에 멋진 1줄로 원샷에 짜는 것보다 5줄짜리 이해가 잘되는 코드가 절대적으로 우위를 점합니다. 읽기 쉬운 코드가 좋은 코드라는 말 들어보셨나요.(대학교 때 당연히 못들어봄)

입사하고는 세상에서 원하는 개발자의 공부를 시작해야함.
학부때 겨우겨우 뚜드려서 돌아가게만 만드는 걸 하면 안됨.
int temp; int a; 이런거 실무에서 쓰면 큰일남 ㅋㅋ

학부때 팀 프로젝트라곤 하지만 한 명이 공부해서 캐리해주는 그런 수준의 프로젝트가 회사에는 없음.
그럼 어떻게 공부를 하는게 좀 현명한가. 나는 후회하는게 없나?

## 5. 공부를 어떻게 할까 (여기부터 똑바로 알려주고픔)
#### 1) 모르는걸 만났을 때
A 라는걸 모른다고 가정하자.
시작하는방법이 너무많다. 저는 절대안하지만 네이버에서 검색, 구글에서 검색, 스택오버플로우, 깃헙 검색~ 구글에서 검색해서 나온 한글 블로그 등등등.
전 구글에서 나온 한글 블로그로 작년까지 공부했음. => 아직도 후회하는 사항임.

무조건 공홈을 가서 보자.
무조건 공홈가서 CheckOut, 샘플 소스코드를 받아서 보자. 문서는 만든사람이 가장 완벽하게 써놓음.

가끔 영어를 잘 변역해 놓은 블로그도 나쁘진않다. 하지만 블로그는 시간이 지나면 업데이트가 안되지만 공홈은 늘 최신성을 유지. 꼭 공홈에서 영어로 공부하시길.. 꼬옥~

#### 2) 옆에 나보다 잘하는 사람이 있을 때
물론 수학문제처럼 혼자 고민해서 성공을 했을 때, 자신의 사고력이 느는 경우는 배제.
ex) 스마트해보이는 코딩이나 어떤 알고리즘은 코드로 구현 이런거는 누가 알려줘서 되는게 당연히 아님.

다만 위의 경우가 아닐 때 자존심 때문에 못 물어보는건 진짜 허접.
모르는 걸 못 물어보는게 어리석은 거지 모르는게 어리석은게 아님.
리누스 토발즈 형도 초심자 일 때 운영체제 몰랐을거임.

기본적인 예의가 어긋나지 않는 선에서 그 사람의 모든 알맹이를 뽑아먹는 다는 생각으로 다 물어볼것.
=> 삽질(shoveling)은 필요할 때만 하는 겁니다.

#### 3) 자신이 가지고 있는 지식은 "남이 보기 편하게" 나누자.
나누는 것도 공부임.
앞서 뽑아먹을 수 있는 사람한테 (숙제를 뽑아먹으라는게 아님) 다 뽑아먹으라는 이야기와
일맥상통한데, 가르치는 사람은 자기일도 못하고 시간 손해인가?

과외 혹은 학부 수업 조교같은걸 한 사람은 알 텐데
애매하던것도 본인이 남을 알려주거나, 하면서 알고있는 지식이 강화가 됨.
오죽하면 인형에게 가르치는 척하면서 학교 공부하는 방법이 있을 정도.

새로운 지식을 남이 보기 쉽게 정리해 놓는 사람이
스마트한 개발 혼자하는 사람보다 회사에선 으뜸으로 쳐줌. 네이버도 동일.
요런 사람들은 남의 시간을 절약해주는 사람임.
학부 때로 치면 친구들 잘 알려주는 그런 사람들이 그런 자질이 있는 것 같음.
혹은 file 정리가 누가봐도 깔끔하다거나. 교수님께 제출하는 보고서가 쓸데없는 말없고 필요한 말만 딱딱 있다거나.

윗사람한테 보여주기 편한 글 말고 남이 받아들이기 편한 글/전달을 하는 사람

#### 4) 롤 모델을 하나 만들어보자
친구여도 좋음.
친구 셋이 걸어가면 그 가운데 스승이 있다고 함.
자기가 있는 소속 집단에 스승은 무조건 있다.
모방은 창조의 어머니. 잘 따라가면 그만큼 흡수력이 빠를 수밖에.

초창기 개발자 꿈이 짙을 때는 대한민국 No.1 스타개발자가 사수인 회사 친구가 부럽기도 했음.
하지만 그럴 필요없다. 내가 일정 수준만 되면 내 옆에 있는 사람 중 스승이 될 사람이 있을 것임.
다 배웠다 싶으면 롤 모델 바꾸면 되지~

옆자리 친구가 개발하는게 천재적이어서 나는 따라하는 중이다!
그 사람을 롤모델로 가지고있는 스킬 셋을 배워보는건 어떨까여.

## 6. 개발자의 길/아님 다른길 선택하기 전에 자기 성향을 파악하면 좋겠다. 진짜 개발자 스타일인지
26살 졸업할 때까지 제가 대학교 숙제 그냥 매번 준 친구가 있음
걍 준 이유는 내가 공부하는게 줄어드는 것도 아니고 상관없어서 였는데요.
불편한 진실일 수도 있지만 여기도 아기새/어미새 구조를 가진 친구 관계가 있을수도 있음 ㅎㅎ
결국 돌고 돌아 지금은 카카오에 들어가 있습니다.
그리고 팀에 적폐청산을 선도하는 녀석이 되었는데, 정말 이 친구 보면서 사람 성향은 알다가도 모르겠.

제 기준으로는 집중력이 지나치게 좋고, 기계적인 사고방식을 너무 좋아한다면 개발자 스타일이 맞는 것 같아요. 수학문제 풀 때 재밌고, 어려운 문제 막히면 적당히 생각하다 답지보는 사람말고 길가면서 풀어보려고 하는 사람들.
개발자 하려면 하루 일과 8시간중 5시간 이상은 코딩을 해야함.
막히면 막히는대로 시간 쓰면서도 끈질기게 방법을 갈구해내지 않고는,,

그냥 적성 안맞아서 하긴 싫은데 대충 어떻게든 돌아가게만 만드는 코드로는 인정 받을 수가 없음.
생각나는 친구가 회사에도 한 명 있는데 볼때마다 안타깝..
=> 이 사람들이 개발자 못하는 건 아닌데 주변 동료/친구의 입장에서도 어려울 것 같음.

1. 개발 공부하기 귀찮고 적당히 취업해서 살고싶다 -> 대기업이나 공기업 IT 관리직가서 최소한의 공부로 매니지먼트쪽으로도 갈 수 있음. 직접적으로 코딩 안하는 팀은 엄청많음.

2. 내 천성이 개발자인거 같다 -> 네이버, 카카오, 삼성, 토스 상대적으론 작은데 알찬 회사들. 요즘은 이런곳들 다 블록체인이며 하드웨어며 다 하는 중이라 어느 분야나 기회가 있음. 네이버는 이제 채용 좀 덜하긴하는데 카카오는 많이 하는 듯함.

3. 걍 들어갈수 있으면 들어가면 좋을 것 같다 -> 구글...아마존...텐센트 etc?

4. 시작을 스타트업으로 하는것에 관한 제 생각 -> "이건 제 생각이라 걍 무조건 흘려들으셈."
엄청나게 첼린지하고 흥미롭고 대박치면 떼돈을 벌 수 있으나 공부할 시간이 부족하고 개발적으로 멘토를 만날 확률이 적음. 개발자의 커리어로 좋을지는 솔직히 아닌 것 같음. 차라리 큰 물에서 경험 다하고 스타트업을 차리셈.
ex) 실제로 혼자 게임 개발하고있는 대학교 친구썰

----------------------------

## 6. 실제 개발 회사의 삶은 어떨까
현업에서의 비개발적인 일과 사회생활의 쓴맛(?)에 대해 조금 넣어보면 어떨까요.
기획, 디자인, 다른개발팀과의 협업이나 커뮤니케이션에서의 어려움. 심지어 CP에 직접 전화하는 일까지요.
학생때는 컴퓨터만 잡고 일한다고 생각할 수 있는데 현업에서는 어쨌든 회사원의 기초소양이 필요하다는걸 알려주면 좋겠습니다.

## 7. 실제 네이버 개발자의 하루 일과



## 8. 추천하는 책
- HeadFirst 시리즈. 구글에 HeadFirst 라고 치면 자동완성으로 각 분야 비기너용 책 다나옴.
- 읽기 좋은코드가 좋은 코드다 by 더스틴 보즈웰, 트레버 파우커
- 리팩토링 by 마틴파울러
- https://d2.naver.com/helloworld

## 9. 네이버 채용은 어떻게?
https://recruit.navercorp.com/naver/recruitMain
https://recruit.navercorp.com/naver/job/detail/developer?annoId=20002361&classId=&jobId=&entTypeCd=&searchTxt=

## * 부록. 우리회사 신입사원들의 질문 리스트 뽑아옴.
자료구조, 알고리즘, OS 등의 기본적인 CS 지식 중 아무래도 일을 하면서 직접적으로 쓰지 않는 것들은 점차 잊어버리게 될 수 있는데, 그런 부분들을 어떻게 지속적으로 보완하시나요?

개발과 연구의 완급조절 시니어들이 사이드 프로젝트에 투자하는 시간은 얼마나 되나요?

실무에서 사용하는 언어가 아닌, 제 2의 언어로 진행하고 있는 프로젝트가 있다면?

입사 후에 업무에 직접적으로 관련되지 않은 CS 전공 공부를 하셨는지, 하셨다면 어떤 방식으로 공부하셨는지 궁금합니다.

개발자가 자신의 현재 skillset 및 실력을 객관적으로 체크할 만한 좋은 기준이 있을까요?

좋은 시니어 개발자로 성장하기 위해 고민하면 좋을 점들이 어떤 것이 있을까요?내가 전문가가 되고 싶은 분야를 찾아가는 방법이 있을까요? 기술을 깊이있게 공부하기 위한 본인의 팁이 있다면 공유해주세요~

살아오면서 개발자로서 성장하는 로드맵이 있는지? (그것을 안본게 후회되는데 꼭 보았으면 좋겠다 등)

같이 일하던 동료분들 중 현재 회사에 계시지 않는 분들은 무엇을 하고 계시는지 그런 부분이 궁금합니다.(회사를 나갔을 때 시니어 개발자로서 커리어)

주니어때 어떤 방식으로 학습을 하셨고, 어떻게 성장했을 때 가장 많이 남았다고 느끼셨나요?